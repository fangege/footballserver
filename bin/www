#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const MySQLHelper = require('../utils/mysql_helper');
const request = require("request");
const ENUMS = require("../include/enums").ENUM;
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */



 /**
 * 初始化应用程序
 */
function initilizeApplication(){
  global.gDataBases = {
      "db_business":new MySQLHelper({
        "host":"127.0.0.1",
        "user":"root",
        "password":"",
        "database":"db_business",
        "port":3306,
        "supportBigNumbers": true,
        "connectionLimit":10
      })
  };
}





async function loadGlobalHtmlTask(){
  try{
    global.optHtml = await loadHtml(ENUMS.OptPath);
    global.businessHtml = await loadHtml(ENUMS.BusinessPath);
  }catch(err){

    console.error(err);
 

  }
 
}




function loadHtml(url) {
  return new Promise(function (resolve, reject) {
    request({ url, timeOut: 10000 }, function (error, response, body) {
      if (!error && response.statusCode == 200) {
        return resolve(body);
      }
      return reject();
    })
  });
}

setInterval(loadGlobalHtmlTask,120 * 1000);

(async function () {

  await loadGlobalHtmlTask();
  initilizeApplication();
  console.log("init finish");
  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);


  /**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
})();




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


